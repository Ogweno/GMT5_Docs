输入与输出
==========

GMT虽然有很多模块，但是这些模块的输入或输出数据，实际上只有几类。

表数据
------

英文称为table data，也称为列数据或多列数据。表数据中有N个记录，每个记录都有M个字段。表数据可以有三种形式：ASCII表、二进制表和netCDF表。

ASCII表
~~~~~~~

ASCII表简介
^^^^^^^^^^^

ASCII表是最常见的数据形式，可以用编辑器直接编辑。数据中有N行M列，每行是一个记录，每列是一个字。一个记录内的字段之间用空格、制表符、逗号或分号分隔。每个字段可以是整数（ ``12`` ）、浮点数（ ``20.34`` ）、地理坐标（ ``12:23:44.5W`` ）、绝对时间（ ``2010-10-20T10:30:53.250`` ）、相对时间（ ``30t`` ）。

例如::

        # This is a comment line
        # lon      lat  evdp
        # This is another comment line
        133.949  34.219  20
        133.528  34.676  15
        130.233  33.410  43
        135.133  35.313  35
        131.377  34.398  22
        132.792  34.457  34
        133.620  34.936  6
        131.101  32.811  23
        129.435  33.212  55
        133.144  33.647  67

记录中以 ``#`` 开头的行，即第一列是 ``#`` 的记录，会被当做注释行直接忽略，不算在N个记录之内。所以这个ASCII表可以认识有10行3列，三列数据分别代表经度、纬度和深度。

不同的模块和选项的组合会对数据的列数以及每列的含义都有不同的定义，这需要根据具体情况去准备数据。准备数据的过程中可能会用到GMT的 ``-i`` 、 ``-o`` 选项以及 ``gawk`` 等工具。

文件头记录
^^^^^^^^^^

在第一个数据点之前，可以有一些非数据的记录，其中以 ``#`` 开头的行都被当做注释忽略，所以不必考虑。其他非 ``#`` 开头的行，则是文件头记录，需要使用 ``-h`` 选项或者参数 :ref:`IO_N_HEADER_RECS` 跳过这些文件头记录。

下面的ASCII表有一个文件头记录，可以使用 ``-h1`` 选项跳过该文件头段记录::

        # This is a comment line
        # lon      lat  evdp
        # This is another comment line
        2015-01-05 10:20:30.456 15 45 60 6.0
        133.949  34.219  20
        133.528  34.676  15
        130.233  33.410  43
        135.133  35.313  35
        131.377  34.398  22
        132.792  34.457  34
        133.620  34.936  6
        131.101  32.811  23
        129.435  33.212  55
        133.144  33.647  67

数据段头记录
^^^^^^^^^^^^

可以将多个数据段放在同一个文件中，这样的文件称为多段数据。

多段数据中，每个数据段都需要有一个头记录作为该段数据开始的标记。所有段的头记录必须以相同的字符开头。GMT中默认的头记录的首字符为 ``>`` ，也可以通过修改 :ref:`IO_SEGMENT_MARKER` 设置为其他字符，也可以用空行或 ``NaN`` 行作为数据段头记录。

下面是一个包含两个数据段的多段数据，每段数据是一个多边形::

    >
    10  20
    15  30
    12  25
    >
    22  20
    30  30
    40  50
    35  44

数据段的头记录不仅仅作为数据段开始的标记，还可以额外指定该段的其他属性。比如数据段的头记录中可以包含额外的 ``-W`` 和 ``-G`` 选项为该段数据单独指定线条颜色和填充颜色。这些数据段头记录中的选项参数将覆盖命令行中相应选项的值。

比如::

    > -W2p,red
    10  20
    15  30
    12  25
    > -W2p,blue
    22  20
    30  30
    40  50
    35  44

二进制表
~~~~~~~~

对于IO密集型任务，可以将表数据写成二进制表以加速。

简单地说，ASCII表与二进制表的区别在于前者使用 ``fprintf`` 输出而后者使用 ``fwrite`` 输出。GMT在读取二进制表数据时，无法直接判断数据中有多少个记录，每个记录有多少个字段。因而需要使用 ``-bi`` 选项指定二进制表数据的格式。见 :doc:`b-option` 一节。

二进制表中也可以有文件头记录，用 ``-h`` 选项可以指定要跳过的字节数。二进制表也可以表示多段数据，每段数据用一个值为 ``NaN`` 的记录作为数据段头记录。

NetCDF表
~~~~~~~~

表数据也可以用NetCDF格式保存，该格式的好处在于通用。比如GMT自带的海岸线数据就是NetCDF的表数据。NetCDF表数据中包含了一个或多个一维数组。由于NetCDF格式的数据中包含了很多metadata，所以读取就变得很容易。

默认情况下，GMT在读入NetCDF表时会从第一个一维数组开始读，直到读完自己所需要的字段数。若需要手动指定如何从NetCDF表中读取数据，可以在文件名或 ``-bi`` 选项后加上后缀 ``?<var1>/<var2>/...`` ，其中 ``<var1>`` 等是要从NetCDF表中读入的变量名。比如 ``file.nc?lon/lat`` 。

2D网格文件
----------

GMT可以绘制2D网格数据。通常，2D网格文件的横轴是经度、纵轴是纬度，Z值可以表示高程、重力值、温度、速度等。

GMT默认的网格文件格式是通用的NetCDF格式，当然也支持Sun光栅文件以及自定义的二进制数据格式。XYZ数据（含三列数据的表数据）也可以通过 :doc:`xyz2grd` 等命令转换成2D网格文件。

NetCDF网格文件
~~~~~~~~~~~~~~

GMT默认将2D网格保存为兼容COARDS的netCDF文件，一般以 ``.nc`` 或 ``.grd`` 作为文件后缀。

COARDS是许多机构在分发网格文件时遵循的标准格式。GMT兼容该格式，因而GMT可以直接读取其他机构或程序提供的网格文件，GMT生成的网格文件也可以被其他程序读取。

GMT一般只用于处理2D网格数据，netCDF文件中可以包含一个或多个二维Z变量。默认情况下，GMT只会读取第一个二维Z变量并忽略其余变量。通过在文件名后加上后缀 ``?<varname>`` 来指定要读入哪个变量的数据作为Z值。比如 ``file.nc?slp`` 会将网格文件中的 ``slp`` 变量作为Z值。

偶尔会遇到三维网格文件（比如地球模型：经度、纬度、深度和速度），这种情况下GMT会默认读取第一层（即最底部的层）。若需要读取特定的层，可以在文件名后加上 ``[<index>]`` 或 ``(<level>)`` ，其中 ``<index>`` 是深度变量的索引值（第一层的索引值为0）； ``<level>`` 要获取数据的那一层的深度值（若 ``<level>`` 指定的深度与网格不重合，则GMT会找到离其最近的深度，而不会去做插值）。比如 ``file.nc?slp[1]`` 读取3D变量 ``slp`` 的第二层， ``file.nc?slp(200)`` 会读取 ``slp`` 变量在深度为200处的这一层。

需要注意，Linux下的问号、方括号、小括号都有特殊的含义，因而在命令行中使用这些字符需要进行转义，或者将整个文件名放在单引号或双引号内。

对于4D网格文件而言，方法类似。比如一个4D网格文件为经度、纬度、深度、时间，具体数据是压强， ``file.nc?pressure[2,1]`` 提取出 ``pressure`` 变量在深度的第3层，时间的第二层处的值。

Native二进制网格文件
~~~~~~~~~~~~~~~~~~~~

旧版本的GMT不支持netCDF格式的文件，因为自定义了二进制网格格式。

该文件格式由两部分组成：892个字节的头段区和长度不定的数据区。

头段区中包含了用于描述网格文件的变量，这些变量在文件中的存储顺序及其含义如下表：

.. table:: GMT自定义二进制网格文件结构

   +--------------------+------------------+------------------------------------------+
   | 参数               |   类型           |    说明                                  |
   +====================+==================+==========================================+
   | ``nx``             | ``int``          | X方向节点数目                            |
   +--------------------+------------------+------------------------------------------+
   | ``ny``             | ``int``          | Y方向节点数目                            |
   +--------------------+------------------+------------------------------------------+
   | ``registration``   | ``int``          | 配准方式：0代表网格线配准，1代表像素配准 |
   +--------------------+------------------+------------------------------------------+
   | ``x_min``          | ``double``       | 区域的X最小值                            |
   +--------------------+------------------+------------------------------------------+
   | ``x_max``          | ``double``       | 区域的X最大值                            |
   +--------------------+------------------+------------------------------------------+
   | ``ymin``           | ``double``       | 区域的Y最小值                            |
   +--------------------+------------------+------------------------------------------+
   | ``y_max``          | ``double``       | 区域的Y最大值                            |
   +--------------------+------------------+------------------------------------------+
   | ``z_min``          | ``double``       | 数据的Z最小值                            |
   +--------------------+------------------+------------------------------------------+
   | ``z_max``          | ``double``       | 数据的Z最大值                            |
   +--------------------+------------------+------------------------------------------+
   | ``x_inc``          | ``double``       | X方向的节点间隔                          |
   +--------------------+------------------+------------------------------------------+
   | ``y_inc``          | ``double``       | Y方向的节点间隔                          |
   +--------------------+------------------+------------------------------------------+
   | ``z_scale_factor`` | ``double``       | 读取Z值后要乘以的因子                    |
   +--------------------+------------------+------------------------------------------+
   | ``z_add_offset``   | ``double``       | Z值乘以因子后要加上的偏移量              |
   +--------------------+------------------+------------------------------------------+
   | ``x_units``        | ``char[80]``     | X方向的单位                              |
   +--------------------+------------------+------------------------------------------+
   | ``y_units``        | ``char[80]``     | Y方向的单位                              |
   +--------------------+------------------+------------------------------------------+
   | ``z_units``        | ``char[80]``     | Z方向的单位                              |
   +--------------------+------------------+------------------------------------------+
   | ``title``          | ``char[80]``     | 对数据集的描述                           |
   +--------------------+------------------+------------------------------------------+
   | ``command``        | ``char[320]``    | 生成该数据的命令                         |
   +--------------------+------------------+------------------------------------------+
   | ``remark``         | ``char[160]``    | 额外的注释                               |
   +--------------------+------------------+------------------------------------------+
   | ``z``              | ``TYPE [nx*ny]`` | Z值数组                                  |
   +--------------------+------------------+------------------------------------------+

Sun光栅文件
~~~~~~~~~~~

Sun光栅文件格式包含了一个头段区以及一系列无符号一字节整型以表示bit-pattern。Sun光栅文件头段区的结构如下表：

.. table::

   +-------------------+---------+------------------------------+
   | 变量              | 类型    | 说明                         |
   +===================+=========+==============================+
   | ``ras_magic``     | ``int`` | 魔法数，用于唯一标记数据格式 |
   +-------------------+---------+------------------------------+
   | ``ras_width``     | ``int`` | 图片宽度（像素数）           |
   +-------------------+---------+------------------------------+
   | ``ras_height``    | ``int`` | 图片高度（像素数）           |
   +-------------------+---------+------------------------------+
   | ``ras_depth``     | ``int`` | 像素深度（1、8、24、32位）   |
   +-------------------+---------+------------------------------+
   | ``ras_length``    | ``int`` | 图片长度（字节数）           |
   +-------------------+---------+------------------------------+
   | ``ras_type``      | ``int`` | 文件类型                     |
   +-------------------+---------+------------------------------+
   | ``ras_maptype``   | ``int`` | colormap类型                 |
   +-------------------+---------+------------------------------+
   | ``ras_maplength`` | ``int`` | 接下来的map的长度（字节数）  |
   +-------------------+---------+------------------------------+

PS代码
------

GMT的绘图模块会生成PS代码到标准输出流。为了将结果保存到PS文件中，需要将PS代码重定向到PS文件中。

PS代码几乎只能作为GMT模块的输出，偶尔可以作为输入。

报告信息
--------

GMT程序在执行过程中，会输出一些正常的输出信息到标准输出流，也会输出用法、错误、警告信息到标准错误流。
