设计哲学
========

命令行
------

与平常接触的Adobe PhotoShop、Adobe Illustator之类的绘图工具不同，GMT是没有图形界面的，无法通过鼠标点击或拖动来执行绘图操作。

GMT是纯命令行的，所有的绘图操作都是通过在命令行敲入命令来执行的。命令行相对于图形界面的优势在于：

- 内存占用更低
- 精确控制图形的显示，比如线条宽度、圆的大小
- 方便写成脚本，具有可批量处理、可重复、可自动化的特点

命令格式
--------

在 :doc:`directory-tree` 一节中已经看到，GMT的 ``bin``\ 目录下几乎可以说是只有 ``gmt`` 这一个有用的二进制文件，所以一切的绘图操作都是通过 ``gmt`` 这个命令来完成的。

一个GMT命令由“ ``gmt`` + ``模块`` + ``选项`` + ``参数``”构成，写成如下形式::

    gmt module -Axx+bxxxx -Bxx+axxxx

其中，

- ``gmt`` 是GMT中的唯一一个命令
- ``module`` 是用于完成某个特定操作的模块名
- ``-A`` 是模块 ``module`` 提供的选项， ``xx`` 为选项 ``-A`` 的参数
- ``+b`` 是选项 ``-A`` 的子选项， ``xxxx`` 为该子选项的参数

一个完整的示例::

    gmt pscoast -R0/20/0/20 -JM6i -Ggray -Wthin -B5 -B+t"Title with spaces" -V -P > map.ps

其中，

- ``gmt`` 是命令
- ``pscoast`` 是用于绘制海岸线的模块
- ``-R`` 、 ``-J`` 、 ``-G`` 等都是 ``pscoast`` 模块的选项
- ``-B+t"Title with spaces"`` 中 ``+t`` 是选项 ``-B`` 的子选项， ``"Title with spaces"`` 是子选项 ``+t`` 的参数

几点说明：

- 若模块名以 ``gmt`` 开头，则模块名中的 ``gmt`` 可省略。比如 ``gmt gmtconvert xxx xxx`` 可以简写为 ``gmt convert xxx xxx``

- 每个模块可以使用哪些选项由模块自己定义，具体参考每个模块的语法说明
- 选项以 ``-`` 开头，后接 **单个字符** 表示某个选项，字符后接选项的参数以及子选项
- 子选项以 ``+`` 开头，后接 **单个字符** 以及子选项的参数
- 官方文档中子选项称为modifier，不太容易翻译，本文档统一用子选项
- 选项之间以空格分隔，选项内部不能有空格
- 对于选项内的字符串，若存在空格，应用单引号或双引号括起来
- 注意 ``-A`` 、``—A``　以及 ``－A`` 的细微区别，这通常是由于标点符号的全角和半角导致的，GMT中只能使用第一种
- GMT4官方文档的网页版、PDF版以及网络上某些介绍GMT的博客中，该字符都是有问题的，直接复制运行通常都会报错。GMT5的官方文档以及本文档不存在该问题。


模块分类
--------

GMT的所有绘图操作都是通过调用不同的模块来完成的，但GMT除了绘图之外，还有数据处理以及格式转换等功能。根据功能的不同，大致将GMT的众多模块分为如下几类：

- 参数设定类：如 :doc:`gmtset`
- 绘图操作类：如 :doc:`psxy` 、 :doc:`grdimage`
- 数据处理类：如 :doc:`gmtmath` 、 :doc:`grdmath`
- 格式转换类：如 :doc:`xyz2grd` 、 :doc:`ps2raster`

输入/输出
---------

GMT的模块众多，但是执行这些模块所需要的输入或输出却只有很少的几种。

#. ASCII表数据

   也称为列数据。即数据中每行代表一个记录，每个记录有相同的列数，每一列数据有相同的含义，例如::

        133.949  34.219  46.135
        133.528  34.676  46.227
        130.233  33.410  43.468
        135.133  35.313  47.598
        131.377  34.398  44.836
        132.792  34.457  45.655
        133.620  34.936  46.469
        131.101  32.811  43.491
        129.435  33.212  42.891
        133.144  33.647  45.261

   上面所示例子中第一列表示经度、第二列表示纬度、第三列表示大小，这是GMT中常见的输入格式。不同的模块和选项的组合会对数据的列数以及每列的含义都有不同的定义，这需要根据具体情况去准备数据。

   表数据是某些模块的输入，也是某些模块的输出。

#. 2D网格文件

   GMT支持2D网格文件的绘制，通常来说2D网格文件的横轴是经度、纵轴是纬度，Z值可以表示高程、重力值、温度、速度等。

   GMT默认的网格文件格式为通用的netCDF格式，当然也支持自定义数据格式。netCDF格式的网格文件一般以 ``.nc`` 作为后缀，当然也可以以 ``.grd`` 作为后缀。

   2D网格文件既可以是某些模块的输入，也是某些模块的输出。

#. PostScript代码

   GMT的绘图模块会输出PostScript代码到标准输出流，为了将绘图结果保存到图片文件中，需要将这些输出的PostScript重定向到PS文件中。

   PostScript几乎只能作为GMT模块的输出，偶尔可以作为输入。

   关于PostScript、标准输出流、重定向等的概念，在后面会进一步介绍。

#. 报告信息

   GMT程序在执行过程中，会输出一些正常的输出信息到标准输出流，也会输出用法、错误、警告信息到标准错误流。
